// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  email     String      @id
  name      String
  status    String      @default("active")
  password  String

  // Relations
  loginAccess   LoginAccess[] // Relation: User has many LoginAccess records
  securityLogs  SecurityLog[] // Relation: User has many SecurityLog records
  roles         UserRole[]    // Relation: User has many roles through UserRole join table
}

model LoginAccess {
  loginIdAccess Int     @id @default(autoincrement())
  email         String // Foreign key: references User.email
  date          DateTime @default(now())

  // Relation
  user User @relation(fields: [email], references: [email]) // Connects LoginAccess to User by email
}

model SecurityLog {
  securityIdLog Int      @id @default(autoincrement())
  email         String   // Foreign key: references User.email
  date          DateTime @default(now())
  action        String
  description   String
  affectedTable String

  // Relation
  user User @relation(fields: [email], references: [email]) // Connects SecurityLog to User by email
}

model Role {
  idRole Int    @id @default(autoincrement())
  rolName String
  status  String @default("active")

  users   UserRole[]   // Relation: Role has many users through UserRole join table
  windows RoleWindow[] // Relation: Role has many windows through RoleWindow join table
}

model Window {
  idWindow   Int    @id @default(autoincrement()) // Primary key: unique identifier for each window/module
  windowName String // Name of the window/module
  status     String @default("active") // Status of the window, defaults to 'active'

  roles RoleWindow[] // Relation: Window has many roles through RoleWindow join table
}

model UserRole {
  idRole Int   // Foreign key: references Role.idRole
  email  String // Foreign key: references User.email

  // Relations
  role Role @relation(fields: [idRole], references: [idRole]) // Connects UserRole to Role
  user User @relation(fields: [email], references: [email])   // Connects UserRole to User

  @@id([idRole, email]) // Composite primary key
}

model RoleWindow {
  idRole   Int // Foreign key: references Role.idRole
  idWindow Int // Foreign key: references Window.idWindow
  create   Int
  read     Int
  update   Int
  delete   Int

  // Relations
  role   Role   @relation(fields: [idRole], references: [idRole])     // Connects RoleWindow to Role
  window Window @relation(fields: [idWindow], references: [idWindow]) // Connects RoleWindow to Window

  @@id([idRole, idWindow]) // Composite primary key
}